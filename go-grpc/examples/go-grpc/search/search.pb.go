// Code generated by protoc-gen-go.
// source: search.proto
// DO NOT EDIT!

/*
Package search is a generated protocol buffer package.

It is generated from these files:
	search.proto

It has these top-level messages:
	Request
	Result
*/
package search

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Result struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username  string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Avatar    string `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	CompanyId int64  `protobuf:"varint,4,opt,name=company_id,json=companyId" json:"company_id,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Result) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Result) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Result) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Result) GetCompanyId() int64 {
	if m != nil {
		return m.CompanyId
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "search.Request")
	proto.RegisterType((*Result)(nil), "search.Result")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Google service

type GoogleClient interface {
	Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error)
	Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (Google_WatchClient, error)
}

type googleClient struct {
	cc *grpc.ClientConn
}

func NewGoogleClient(cc *grpc.ClientConn) GoogleClient {
	return &googleClient{cc}
}

func (c *googleClient) Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/search.Google/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleClient) Watch(ctx context.Context, in *Request, opts ...grpc.CallOption) (Google_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Google_serviceDesc.Streams[0], c.cc, "/search.Google/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &googleWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Google_WatchClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type googleWatchClient struct {
	grpc.ClientStream
}

func (x *googleWatchClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Google service

type GoogleServer interface {
	Search(context.Context, *Request) (*Result, error)
	Watch(*Request, Google_WatchServer) error
}

func RegisterGoogleServer(s *grpc.Server, srv GoogleServer) {
	s.RegisterService(&_Google_serviceDesc, srv)
}

func _Google_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.Google/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServer).Search(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Google_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GoogleServer).Watch(m, &googleWatchServer{stream})
}

type Google_WatchServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type googleWatchServer struct {
	grpc.ServerStream
}

func (x *googleWatchServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

var _Google_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.Google",
	HandlerType: (*GoogleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Google_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Google_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "search.proto",
}

func init() { proto.RegisterFile("search.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x4d, 0x2c,
	0x4a, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xe4, 0xb9, 0xd8,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x0b, 0x4b, 0x53, 0x8b, 0x2a,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0xa5, 0x6c, 0x2e, 0xb6, 0xa0, 0xd4, 0xe2,
	0xd2, 0x9c, 0x12, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0xb0, 0x24, 0x73, 0x10, 0x53, 0x66, 0x8a,
	0x90, 0x14, 0x17, 0x47, 0x69, 0x71, 0x6a, 0x51, 0x5e, 0x62, 0x6e, 0xaa, 0x04, 0x13, 0x58, 0x0b,
	0x9c, 0x2f, 0x24, 0xc6, 0xc5, 0x96, 0x58, 0x96, 0x58, 0x92, 0x58, 0x24, 0xc1, 0x0c, 0x96, 0x81,
	0xf2, 0x84, 0x64, 0xb9, 0xb8, 0x92, 0xf3, 0x73, 0x0b, 0x12, 0xf3, 0x2a, 0xe3, 0x33, 0x53, 0x24,
	0x58, 0xc0, 0x66, 0x71, 0x42, 0x45, 0x3c, 0x53, 0x8c, 0x92, 0xb9, 0xd8, 0xdc, 0xf3, 0xf3, 0xd3,
	0x73, 0x52, 0x85, 0xb4, 0xb9, 0xd8, 0x82, 0xc1, 0x2e, 0x14, 0xe2, 0xd7, 0x83, 0x3a, 0x1c, 0xea,
	0x4e, 0x29, 0x3e, 0x84, 0x00, 0xc8, 0x5d, 0x4a, 0x0c, 0x42, 0x3a, 0x5c, 0xac, 0xe1, 0x89, 0x25,
	0x44, 0xa9, 0x35, 0x60, 0x4c, 0x62, 0x03, 0x87, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9d,
	0x66, 0x49, 0x9f, 0x11, 0x01, 0x00, 0x00,
}
