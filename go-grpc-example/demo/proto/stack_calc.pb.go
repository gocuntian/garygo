// Code generated by protoc-gen-go.
// source: stack_calc.proto
// DO NOT EDIT!

/*
Package stackcalc is a generated protocol buffer package.

It is generated from these files:
	stack_calc.proto

It has these top-level messages:
	CreateCalcRequest
	CreateCalcResponse
	DestroyCalcRequest
	DestroyCalcResponse
	ListCalcsRequest
	ListCalcsResponse
	EvaluateStatementRequest
	EvaluateStatementResponse
	GetStateRequest
	GetStateResponse
	Statement
	State
*/
package stackcalc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CalculationError int32

const (
	CalculationError_NO_ERROR        CalculationError = 0
	CalculationError_STACK_UNDERFLOW CalculationError = 1
	CalculationError_STACK_OVERFLOW  CalculationError = 2
	CalculationError_DIVIDE_BY_ZERO  CalculationError = 3
)

var CalculationError_name = map[int32]string{
	0: "NO_ERROR",
	1: "STACK_UNDERFLOW",
	2: "STACK_OVERFLOW",
	3: "DIVIDE_BY_ZERO",
}
var CalculationError_value = map[string]int32{
	"NO_ERROR":        0,
	"STACK_UNDERFLOW": 1,
	"STACK_OVERFLOW":  2,
	"DIVIDE_BY_ZERO":  3,
}

func (x CalculationError) String() string {
	return proto.EnumName(CalculationError_name, int32(x))
}
func (CalculationError) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Statement_Token_Operator int32

const (
	Statement_Token_VAL      Statement_Token_Operator = 0
	Statement_Token_ADD      Statement_Token_Operator = 1
	Statement_Token_SUBTRACT Statement_Token_Operator = 2
	Statement_Token_MULTIPLY Statement_Token_Operator = 3
	Statement_Token_DIVIDE   Statement_Token_Operator = 4
	Statement_Token_DROP     Statement_Token_Operator = 7
)

var Statement_Token_Operator_name = map[int32]string{
	0: "VAL",
	1: "ADD",
	2: "SUBTRACT",
	3: "MULTIPLY",
	4: "DIVIDE",
	7: "DROP",
}
var Statement_Token_Operator_value = map[string]int32{
	"VAL":      0,
	"ADD":      1,
	"SUBTRACT": 2,
	"MULTIPLY": 3,
	"DIVIDE":   4,
	"DROP":     7,
}

func (x Statement_Token_Operator) String() string {
	return proto.EnumName(Statement_Token_Operator_name, int32(x))
}
func (Statement_Token_Operator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 0}
}

type CreateCalcRequest struct {
	StackDepth uint32 `protobuf:"varint,1,opt,name=stack_depth,json=stackDepth" json:"stack_depth,omitempty"`
}

func (m *CreateCalcRequest) Reset()                    { *m = CreateCalcRequest{} }
func (m *CreateCalcRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCalcRequest) ProtoMessage()               {}
func (*CreateCalcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateCalcRequest) GetStackDepth() uint32 {
	if m != nil {
		return m.StackDepth
	}
	return 0
}

type CreateCalcResponse struct {
	CalcId string `protobuf:"bytes,1,opt,name=calc_id,json=calcId" json:"calc_id,omitempty"`
}

func (m *CreateCalcResponse) Reset()                    { *m = CreateCalcResponse{} }
func (m *CreateCalcResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCalcResponse) ProtoMessage()               {}
func (*CreateCalcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateCalcResponse) GetCalcId() string {
	if m != nil {
		return m.CalcId
	}
	return ""
}

type DestroyCalcRequest struct {
	CalcId string `protobuf:"bytes,1,opt,name=calc_id,json=calcId" json:"calc_id,omitempty"`
}

func (m *DestroyCalcRequest) Reset()                    { *m = DestroyCalcRequest{} }
func (m *DestroyCalcRequest) String() string            { return proto.CompactTextString(m) }
func (*DestroyCalcRequest) ProtoMessage()               {}
func (*DestroyCalcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DestroyCalcRequest) GetCalcId() string {
	if m != nil {
		return m.CalcId
	}
	return ""
}

type DestroyCalcResponse struct {
}

func (m *DestroyCalcResponse) Reset()                    { *m = DestroyCalcResponse{} }
func (m *DestroyCalcResponse) String() string            { return proto.CompactTextString(m) }
func (*DestroyCalcResponse) ProtoMessage()               {}
func (*DestroyCalcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListCalcsRequest struct {
	Limit uint32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
}

func (m *ListCalcsRequest) Reset()                    { *m = ListCalcsRequest{} }
func (m *ListCalcsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCalcsRequest) ProtoMessage()               {}
func (*ListCalcsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListCalcsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListCalcsResponse struct {
	CalcIds []string `protobuf:"bytes,1,rep,name=calc_ids,json=calcIds" json:"calc_ids,omitempty"`
}

func (m *ListCalcsResponse) Reset()                    { *m = ListCalcsResponse{} }
func (m *ListCalcsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListCalcsResponse) ProtoMessage()               {}
func (*ListCalcsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListCalcsResponse) GetCalcIds() []string {
	if m != nil {
		return m.CalcIds
	}
	return nil
}

type EvaluateStatementRequest struct {
	CalcId    string     `protobuf:"bytes,1,opt,name=calc_id,json=calcId" json:"calc_id,omitempty"`
	Statement *Statement `protobuf:"bytes,2,opt,name=statement" json:"statement,omitempty"`
}

func (m *EvaluateStatementRequest) Reset()                    { *m = EvaluateStatementRequest{} }
func (m *EvaluateStatementRequest) String() string            { return proto.CompactTextString(m) }
func (*EvaluateStatementRequest) ProtoMessage()               {}
func (*EvaluateStatementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EvaluateStatementRequest) GetCalcId() string {
	if m != nil {
		return m.CalcId
	}
	return ""
}

func (m *EvaluateStatementRequest) GetStatement() *Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

type EvaluateStatementResponse struct {
	State *State           `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	Err   CalculationError `protobuf:"varint,2,opt,name=err,enum=stackcalc.CalculationError" json:"err,omitempty"`
}

func (m *EvaluateStatementResponse) Reset()                    { *m = EvaluateStatementResponse{} }
func (m *EvaluateStatementResponse) String() string            { return proto.CompactTextString(m) }
func (*EvaluateStatementResponse) ProtoMessage()               {}
func (*EvaluateStatementResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *EvaluateStatementResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *EvaluateStatementResponse) GetErr() CalculationError {
	if m != nil {
		return m.Err
	}
	return CalculationError_NO_ERROR
}

type GetStateRequest struct {
	CalcId string `protobuf:"bytes,1,opt,name=calc_id,json=calcId" json:"calc_id,omitempty"`
}

func (m *GetStateRequest) Reset()                    { *m = GetStateRequest{} }
func (m *GetStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStateRequest) ProtoMessage()               {}
func (*GetStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetStateRequest) GetCalcId() string {
	if m != nil {
		return m.CalcId
	}
	return ""
}

type GetStateResponse struct {
	State *State `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
}

func (m *GetStateResponse) Reset()                    { *m = GetStateResponse{} }
func (m *GetStateResponse) String() string            { return proto.CompactTextString(m) }
func (*GetStateResponse) ProtoMessage()               {}
func (*GetStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetStateResponse) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

type Statement struct {
	Tokens []*Statement_Token `protobuf:"bytes,1,rep,name=tokens" json:"tokens,omitempty"`
}

func (m *Statement) Reset()                    { *m = Statement{} }
func (m *Statement) String() string            { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()               {}
func (*Statement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Statement) GetTokens() []*Statement_Token {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type Statement_Token struct {
	Op  Statement_Token_Operator `protobuf:"varint,1,opt,name=op,enum=stackcalc.Statement_Token_Operator" json:"op,omitempty"`
	Val int64                    `protobuf:"zigzag64,2,opt,name=val" json:"val,omitempty"`
}

func (m *Statement_Token) Reset()                    { *m = Statement_Token{} }
func (m *Statement_Token) String() string            { return proto.CompactTextString(m) }
func (*Statement_Token) ProtoMessage()               {}
func (*Statement_Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

func (m *Statement_Token) GetOp() Statement_Token_Operator {
	if m != nil {
		return m.Op
	}
	return Statement_Token_VAL
}

func (m *Statement_Token) GetVal() int64 {
	if m != nil {
		return m.Val
	}
	return 0
}

type State struct {
	StackDepth uint32  `protobuf:"varint,1,opt,name=stack_depth,json=stackDepth" json:"stack_depth,omitempty"`
	Vals       []int64 `protobuf:"zigzag64,2,rep,packed,name=vals" json:"vals,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *State) GetStackDepth() uint32 {
	if m != nil {
		return m.StackDepth
	}
	return 0
}

func (m *State) GetVals() []int64 {
	if m != nil {
		return m.Vals
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateCalcRequest)(nil), "stackcalc.CreateCalcRequest")
	proto.RegisterType((*CreateCalcResponse)(nil), "stackcalc.CreateCalcResponse")
	proto.RegisterType((*DestroyCalcRequest)(nil), "stackcalc.DestroyCalcRequest")
	proto.RegisterType((*DestroyCalcResponse)(nil), "stackcalc.DestroyCalcResponse")
	proto.RegisterType((*ListCalcsRequest)(nil), "stackcalc.ListCalcsRequest")
	proto.RegisterType((*ListCalcsResponse)(nil), "stackcalc.ListCalcsResponse")
	proto.RegisterType((*EvaluateStatementRequest)(nil), "stackcalc.EvaluateStatementRequest")
	proto.RegisterType((*EvaluateStatementResponse)(nil), "stackcalc.EvaluateStatementResponse")
	proto.RegisterType((*GetStateRequest)(nil), "stackcalc.GetStateRequest")
	proto.RegisterType((*GetStateResponse)(nil), "stackcalc.GetStateResponse")
	proto.RegisterType((*Statement)(nil), "stackcalc.Statement")
	proto.RegisterType((*Statement_Token)(nil), "stackcalc.Statement.Token")
	proto.RegisterType((*State)(nil), "stackcalc.State")
	proto.RegisterEnum("stackcalc.CalculationError", CalculationError_name, CalculationError_value)
	proto.RegisterEnum("stackcalc.Statement_Token_Operator", Statement_Token_Operator_name, Statement_Token_Operator_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StackCalc service

type StackCalcClient interface {
	// Create a Calc instance and return its ID
	CreateCalc(ctx context.Context, in *CreateCalcRequest, opts ...grpc.CallOption) (*CreateCalcResponse, error)
	// Destroy the specified Calc instance
	DestroyCalc(ctx context.Context, in *DestroyCalcRequest, opts ...grpc.CallOption) (*DestroyCalcResponse, error)
	// Lists existing Calc instances
	ListCalcs(ctx context.Context, in *ListCalcsRequest, opts ...grpc.CallOption) (*ListCalcsResponse, error)
	// Evaluates the specified statement and returns the state of the Calc after the
	// evaluation.  If an error occurs then that is returned as well
	EvaluateStatement(ctx context.Context, in *EvaluateStatementRequest, opts ...grpc.CallOption) (*EvaluateStatementResponse, error)
	// Returns the state of the specified Calc
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	Interact(ctx context.Context, opts ...grpc.CallOption) (StackCalc_InteractClient, error)
}

type stackCalcClient struct {
	cc *grpc.ClientConn
}

func NewStackCalcClient(cc *grpc.ClientConn) StackCalcClient {
	return &stackCalcClient{cc}
}

func (c *stackCalcClient) CreateCalc(ctx context.Context, in *CreateCalcRequest, opts ...grpc.CallOption) (*CreateCalcResponse, error) {
	out := new(CreateCalcResponse)
	err := grpc.Invoke(ctx, "/stackcalc.StackCalc/CreateCalc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackCalcClient) DestroyCalc(ctx context.Context, in *DestroyCalcRequest, opts ...grpc.CallOption) (*DestroyCalcResponse, error) {
	out := new(DestroyCalcResponse)
	err := grpc.Invoke(ctx, "/stackcalc.StackCalc/DestroyCalc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackCalcClient) ListCalcs(ctx context.Context, in *ListCalcsRequest, opts ...grpc.CallOption) (*ListCalcsResponse, error) {
	out := new(ListCalcsResponse)
	err := grpc.Invoke(ctx, "/stackcalc.StackCalc/ListCalcs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackCalcClient) EvaluateStatement(ctx context.Context, in *EvaluateStatementRequest, opts ...grpc.CallOption) (*EvaluateStatementResponse, error) {
	out := new(EvaluateStatementResponse)
	err := grpc.Invoke(ctx, "/stackcalc.StackCalc/EvaluateStatement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackCalcClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := grpc.Invoke(ctx, "/stackcalc.StackCalc/GetState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackCalcClient) Interact(ctx context.Context, opts ...grpc.CallOption) (StackCalc_InteractClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StackCalc_serviceDesc.Streams[0], c.cc, "/stackcalc.StackCalc/Interact", opts...)
	if err != nil {
		return nil, err
	}
	x := &stackCalcInteractClient{stream}
	return x, nil
}

type StackCalc_InteractClient interface {
	Send(*EvaluateStatementRequest) error
	Recv() (*EvaluateStatementResponse, error)
	grpc.ClientStream
}

type stackCalcInteractClient struct {
	grpc.ClientStream
}

func (x *stackCalcInteractClient) Send(m *EvaluateStatementRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stackCalcInteractClient) Recv() (*EvaluateStatementResponse, error) {
	m := new(EvaluateStatementResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StackCalc service

type StackCalcServer interface {
	// Create a Calc instance and return its ID
	CreateCalc(context.Context, *CreateCalcRequest) (*CreateCalcResponse, error)
	// Destroy the specified Calc instance
	DestroyCalc(context.Context, *DestroyCalcRequest) (*DestroyCalcResponse, error)
	// Lists existing Calc instances
	ListCalcs(context.Context, *ListCalcsRequest) (*ListCalcsResponse, error)
	// Evaluates the specified statement and returns the state of the Calc after the
	// evaluation.  If an error occurs then that is returned as well
	EvaluateStatement(context.Context, *EvaluateStatementRequest) (*EvaluateStatementResponse, error)
	// Returns the state of the specified Calc
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	Interact(StackCalc_InteractServer) error
}

func RegisterStackCalcServer(s *grpc.Server, srv StackCalcServer) {
	s.RegisterService(&_StackCalc_serviceDesc, srv)
}

func _StackCalc_CreateCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackCalcServer).CreateCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackcalc.StackCalc/CreateCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackCalcServer).CreateCalc(ctx, req.(*CreateCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackCalc_DestroyCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyCalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackCalcServer).DestroyCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackcalc.StackCalc/DestroyCalc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackCalcServer).DestroyCalc(ctx, req.(*DestroyCalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackCalc_ListCalcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCalcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackCalcServer).ListCalcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackcalc.StackCalc/ListCalcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackCalcServer).ListCalcs(ctx, req.(*ListCalcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackCalc_EvaluateStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackCalcServer).EvaluateStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackcalc.StackCalc/EvaluateStatement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackCalcServer).EvaluateStatement(ctx, req.(*EvaluateStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackCalc_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackCalcServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackcalc.StackCalc/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackCalcServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackCalc_Interact_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StackCalcServer).Interact(&stackCalcInteractServer{stream})
}

type StackCalc_InteractServer interface {
	Send(*EvaluateStatementResponse) error
	Recv() (*EvaluateStatementRequest, error)
	grpc.ServerStream
}

type stackCalcInteractServer struct {
	grpc.ServerStream
}

func (x *stackCalcInteractServer) Send(m *EvaluateStatementResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stackCalcInteractServer) Recv() (*EvaluateStatementRequest, error) {
	m := new(EvaluateStatementRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StackCalc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stackcalc.StackCalc",
	HandlerType: (*StackCalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCalc",
			Handler:    _StackCalc_CreateCalc_Handler,
		},
		{
			MethodName: "DestroyCalc",
			Handler:    _StackCalc_DestroyCalc_Handler,
		},
		{
			MethodName: "ListCalcs",
			Handler:    _StackCalc_ListCalcs_Handler,
		},
		{
			MethodName: "EvaluateStatement",
			Handler:    _StackCalc_EvaluateStatement_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _StackCalc_GetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Interact",
			Handler:       _StackCalc_Interact_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stack_calc.proto",
}

func init() { proto.RegisterFile("stack_calc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x5d, 0x4f, 0x13, 0x41,
	0x14, 0x65, 0xbb, 0xf4, 0xeb, 0x56, 0x61, 0xb8, 0x60, 0x2c, 0x0b, 0x6a, 0xb3, 0x1a, 0xd3, 0x90,
	0xd0, 0x98, 0xc5, 0x27, 0xe3, 0x4b, 0xe9, 0xae, 0xda, 0x50, 0xbb, 0x64, 0x28, 0x18, 0x34, 0xa6,
	0x8e, 0x65, 0xa2, 0x0d, 0x4b, 0x77, 0x9d, 0x1d, 0x48, 0xfc, 0x33, 0xfe, 0x36, 0x7f, 0x86, 0x8f,
	0x66, 0x66, 0x97, 0xed, 0x5a, 0x5a, 0x89, 0x89, 0x6f, 0x33, 0xe7, 0x9e, 0x39, 0xe7, 0xee, 0xed,
	0x3d, 0x05, 0x12, 0x4b, 0x36, 0x3a, 0x1f, 0x8e, 0x58, 0x30, 0x6a, 0x45, 0x22, 0x94, 0x21, 0x56,
	0x35, 0xa2, 0x00, 0xfb, 0x39, 0xac, 0x75, 0x04, 0x67, 0x92, 0x77, 0x58, 0x30, 0xa2, 0xfc, 0xdb,
	0x25, 0x8f, 0x25, 0x3e, 0x82, 0x5a, 0xf2, 0xe6, 0x8c, 0x47, 0xf2, 0x6b, 0xdd, 0x68, 0x18, 0xcd,
	0xbb, 0x14, 0x34, 0xe4, 0x2a, 0xc4, 0xde, 0x05, 0xcc, 0xbf, 0x8a, 0xa3, 0x70, 0x12, 0x73, 0xbc,
	0x0f, 0x65, 0xa5, 0x39, 0x1c, 0x9f, 0xe9, 0x27, 0x55, 0x5a, 0x52, 0xd7, 0xee, 0x99, 0xa2, 0xbb,
	0x3c, 0x96, 0x22, 0xfc, 0x9e, 0x77, 0x59, 0x48, 0xbf, 0x07, 0xeb, 0x7f, 0xd0, 0x13, 0x79, 0xbb,
	0x09, 0xa4, 0x37, 0x8e, 0xa5, 0xc2, 0xe2, 0x6b, 0x8d, 0x0d, 0x28, 0x06, 0xe3, 0x8b, 0xb1, 0x4c,
	0x7b, 0x4c, 0x2e, 0x76, 0x0b, 0xd6, 0x72, 0xcc, 0xb4, 0xbb, 0x4d, 0xa8, 0xa4, 0x76, 0x71, 0xdd,
	0x68, 0x98, 0xcd, 0x2a, 0x2d, 0x27, 0x7e, 0xb1, 0xfd, 0x05, 0xea, 0xde, 0x15, 0x0b, 0x2e, 0x99,
	0xe4, 0x47, 0x92, 0x49, 0x7e, 0xc1, 0x27, 0xf2, 0xb6, 0x2e, 0xd1, 0x01, 0x35, 0xc6, 0x84, 0x5c,
	0x2f, 0x34, 0x8c, 0x66, 0xcd, 0xd9, 0x68, 0x65, 0x83, 0x6d, 0x4d, 0x85, 0xa6, 0x34, 0x5b, 0xc0,
	0xe6, 0x1c, 0xa3, 0xb4, 0xc1, 0xa7, 0x50, 0xd4, 0x4c, 0xed, 0x53, 0x73, 0xc8, 0xac, 0x18, 0x4d,
	0xca, 0xb8, 0x0b, 0x26, 0x17, 0x42, 0x5b, 0xae, 0x38, 0x5b, 0x39, 0x96, 0xfa, 0xde, 0xcb, 0x80,
	0xc9, 0x71, 0x38, 0xf1, 0x84, 0x08, 0x05, 0x55, 0x3c, 0x7b, 0x07, 0x56, 0x5f, 0x73, 0x99, 0x28,
	0xdc, 0x36, 0xf9, 0x17, 0x40, 0xa6, 0xdc, 0x7f, 0x6b, 0xcb, 0xfe, 0x69, 0x40, 0x35, 0xfb, 0x28,
	0x74, 0xa0, 0x24, 0xc3, 0x73, 0x3e, 0x49, 0x66, 0x5d, 0x73, 0xac, 0x79, 0xa3, 0x69, 0x0d, 0x14,
	0x85, 0xa6, 0x4c, 0xeb, 0x87, 0x01, 0x45, 0x8d, 0xe0, 0x1e, 0x14, 0xc2, 0x48, 0x1b, 0xae, 0x38,
	0x8f, 0x17, 0xbf, 0x6c, 0xf9, 0x11, 0x17, 0x4c, 0x86, 0x82, 0x16, 0xc2, 0x08, 0x09, 0x98, 0x57,
	0x2c, 0xd0, 0x73, 0x41, 0xaa, 0x8e, 0x76, 0x1f, 0x2a, 0xd7, 0x0c, 0x2c, 0x83, 0x79, 0xd2, 0xee,
	0x91, 0x25, 0x75, 0x68, 0xbb, 0x2e, 0x31, 0xf0, 0x0e, 0x54, 0x8e, 0x8e, 0xf7, 0x07, 0xb4, 0xdd,
	0x19, 0x90, 0x82, 0xba, 0xbd, 0x3d, 0xee, 0x0d, 0xba, 0x87, 0xbd, 0x53, 0x62, 0x22, 0x40, 0xc9,
	0xed, 0x9e, 0x74, 0x5d, 0x8f, 0x2c, 0x63, 0x05, 0x96, 0x5d, 0xea, 0x1f, 0x92, 0xb2, 0xfd, 0x12,
	0x8a, 0xba, 0x83, 0x5b, 0x03, 0x82, 0x08, 0xcb, 0x57, 0x2c, 0x88, 0xeb, 0x85, 0x86, 0xd9, 0x44,
	0xaa, 0xcf, 0x3b, 0x1f, 0x81, 0xcc, 0xfe, 0x42, 0xca, 0xb5, 0xef, 0x0f, 0x3d, 0x4a, 0x7d, 0x4a,
	0x96, 0x70, 0x1d, 0x56, 0x8f, 0x06, 0xed, 0xce, 0xc1, 0xf0, 0xb8, 0xef, 0x7a, 0xf4, 0x55, 0xcf,
	0x7f, 0x47, 0x0c, 0x44, 0x58, 0x49, 0x40, 0xff, 0x24, 0xc5, 0x0a, 0x0a, 0x4b, 0xda, 0x1b, 0xee,
	0x9f, 0x0e, 0xdf, 0x7b, 0xd4, 0x27, 0xa6, 0xf3, 0xcb, 0xd4, 0xf3, 0x1f, 0x9d, 0x2b, 0x13, 0x3c,
	0x00, 0x98, 0x26, 0x14, 0xb7, 0xf3, 0x5b, 0x32, 0x1b, 0x77, 0xeb, 0xc1, 0x82, 0x6a, 0x9a, 0xbb,
	0x25, 0xec, 0x43, 0x2d, 0x17, 0x48, 0xcc, 0xf3, 0x6f, 0xe6, 0xda, 0x7a, 0xb8, 0xa8, 0x9c, 0xe9,
	0xbd, 0x81, 0x6a, 0x96, 0x4f, 0xcc, 0x6f, 0xf0, 0x6c, 0xbe, 0xad, 0xed, 0xf9, 0xc5, 0x4c, 0xe9,
	0x13, 0xac, 0xdd, 0x08, 0x14, 0xe6, 0x37, 0x66, 0x51, 0xae, 0xad, 0x27, 0x7f, 0x27, 0x65, 0x0e,
	0x1e, 0x54, 0xae, 0x23, 0x81, 0xf9, 0x25, 0x9e, 0xc9, 0x94, 0xb5, 0x35, 0xb7, 0x96, 0xc9, 0x7c,
	0x80, 0x4a, 0x77, 0x22, 0xb9, 0x60, 0xa3, 0xff, 0xdb, 0x5f, 0xd3, 0x78, 0x66, 0x7c, 0x2e, 0xe9,
	0xbf, 0xf5, 0xbd, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x49, 0x2d, 0x32, 0xea, 0x05, 0x00,
	0x00,
}
